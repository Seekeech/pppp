import random
import json
import time
import os
import telebot
from PIL import Image, ImageDraw, ImageOps
from telebot import types
import io
import requests
import time
import threading
import shutil

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
with open('cards.json', 'r', encoding='utf-8') as file:
    cards = json.load(file)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("7767020364:AAH4_Xy3hQMQoyuqt2tHjgGXsPp3chKv1gs")

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
DATA_FOLDER = "user_data"
BACKGROUNDS_FILE = "backgrounds.json"
DEFAULT_BANNER = "black.jpg"
STICKER_RANGE_1 = "CAACAgIAAxkBAAEMsUlntNR3VHJvLkrSB0otE9izOwRD6QACuUAAAnv6SEkzZLuvkIG7MDYE"  # 99-999
STICKER_RANGE_2 = "CAACAgIAAxkBAAEMsUpntNR31UiNbOPV6KqVUUqJ_5kwDQACaUAAArGISUkfZ0gHO5ysQzYE"  # 1000-4999
STICKER_RANGE_3 = "CAACAgIAAxkBAAEMsUtntNR3DiGaX2_QhvKtVgasZaV-QAACLFEAAucRQUmOOfnyXaFCbTYE"  # 5000-9999
STICKER_RANGE_4 = "CAACAgIAAxkBAAEMsUxntNR3AS8dKAE_jmr-rkS2Gf_tnAACe00AAh_-QUlWY0PosQKs_TYE"  # 10000+
ADMINS_FILE = "admins.json"
# –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –†–ü-–¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è ‚Üí –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è)
RP_ACTIONS = {
    "üíû –¢–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç—å": {
        "–æ–±–Ω—è—Ç—å": "–æ–±–Ω—è–ª",
        "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": "–ø–æ—Ü–µ–ª–æ–≤–∞–ª",
        "–ø–æ–≥–ª–∞–¥–∏—Ç—å": "–ø–æ–≥–ª–∞–¥–∏–ª",
        "–æ–±–ª–∏–∑–∞—Ç—å": "–æ–±–ª–∏–∑–∞–ª",
        "—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å": "—Ñ–ª–∏—Ä—Ç–æ–≤–∞–ª",
        "–ø—Ä–∏–∂–∞—Ç—å": "–ø—Ä–∏–∂–∞–ª",
        "—É–∫—É—Å–∏—Ç—å": "—É–∫—É—Å–∏–ª",
        "–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—Å–æ—Å": "–æ—Å—Ç–∞–≤–∏–ª –∑–∞—Å–æ—Å",
        "—Å–æ–≥—Ä–µ—Ç—å": "—Å–æ–≥—Ä–µ–ª",
        "–ø—Ä–æ—Å—Ç–æ–Ω–∞—Ç—å –≤ —É—Ö–æ": "–ø—Ä–æ—Å—Ç–æ–Ω–∞–ª –≤ —É—Ö–æ",
        "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –≤ –º–∞–∫—É—à–∫—É": "–ø–æ—Ü–µ–ª–æ–≤–∞–ª –≤ –º–∞–∫—É—à–∫—É",
        "–∑–∞—Å–æ—Å–∞—Ç—å": "–∑–∞—Å–æ—Å–∞–ª",
        "–ø–æ–¥–∞—Ä–∏—Ç—å –∫–æ–ª–µ—á–∫–æ": "–ø–æ–¥–∞—Ä–∏–ª –∫–æ–ª–µ—á–∫–æ"
    },
    "üîû 18+": {
        "–≤—ã–µ–±–∞—Ç—å": "–≤—ã–µ–±–∞–ª",
        "—Ç—Ä–∞—Ö–Ω—É—Ç—å": "—Ç—Ä–∞—Ö–Ω—É–ª",
        "–ø–æ–¥—Ä–æ—á–∏—Ç—å": "–ø–æ–¥—Ä–æ—á–∏–ª",
        "–æ—Ç—Å–æ—Å–∞—Ç—å": "–æ—Ç—Å–æ—Å–∞–ª",
        "–æ–±–∫–æ–Ω—á–∞—Ç—å": "–æ–±–∫–æ–Ω—á–∞–ª",
        "–æ—Ç–ª–∏–∑–∞—Ç—å": "–æ—Ç–ª–∏–∑–∞–ª",
        "—à–ª–µ–ø–Ω—É—Ç—å": "—à–ª–µ–ø–Ω—É–ª",
        "—Ä–∞–∑–¥–µ—Ç—å": "—Ä–∞–∑–¥–µ–ª",
        "–ø—É—Å—Ç–∏—Ç—å –ø–æ –∫—Ä—É–≥—É": "–ø—É—Å—Ç–∏–ª –ø–æ –∫—Ä—É–≥—É",
        "–±—É—Ö–Ω—É—Ç—å": "–±—É—Ö–Ω—É–ª",
        "–ø–æ–∂–º—è–∫–∞—Ç—å —è–∏—á–∫–∏": "–ø–æ–∂–º—è–∫–∞–ª —è–∏—á–∫–∏",
        "–ø–æ–∂–º—è–∫–∞—Ç—å —Ç–∏—Ç—å–∫–∏": "–ø–æ–∂–º—è–∫–∞–ª —Ç–∏—Ç—å–∫–∏",
        "–∑–∞–∂–∞—Ç—å —Å–∏—Å—å–∫–∞–º–∏": "–∑–∞–∂–∞–ª —Å–∏—Å—å–∫–∞–º–∏"
    },
    "üî™ –ñ–µ—Å—Ç—å": {
        "—É–±–∏—Ç—å": "—É–±–∏–ª",
        "–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å": "–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª",
        "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å": "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è–ª",
        "—É–¥–∞—Ä–∏—Ç—å": "—É–¥–∞—Ä–∏–ª",
        "–∑–∞–¥—É—à–∏—Ç—å": "–∑–∞–¥—É—à–∏–ª",
        "—Å–≤—è–∑–∞—Ç—å": "—Å–≤—è–∑–∞–ª",
        "–ø—Ä–æ–¥–∞—Ç—å –º–µ—Ñ": "–ø—Ä–æ–¥–∞–ª –º–µ—Ñ",
        "—Ä–∞—Å—á–ª–µ–Ω–∏—Ç—å": "—Ä–∞—Å—á–ª–µ–Ω–∏–ª",
        "–≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å —Å —Ç–∞–Ω–∫–∞": "–≤—ã—Å—Ç—Ä–µ–ª–∏–ª —Å —Ç–∞–Ω–∫–∞",
        "—Å–∂–µ—á—å": "—Å–∂–µ–≥",
        "–ø–æ–≤–µ—Å–∏—Ç—å": "–ø–æ–≤–µ—Å–∏–ª",
        "–≤—ã–∫–∏–Ω—É—Ç—å –≤ –æ–∫–Ω–æ": "–≤—ã–∫–∏–Ω—É–ª –≤ –æ–∫–Ω–æ",
        "–∫–∞–∑–Ω–∏—Ç—å": "–∫–∞–∑–Ω–∏–ª",
        "–ø–µ—Ä–µ–µ—Ö–∞—Ç—å –ø–æ–µ–∑–¥–æ–º": "–ø–µ—Ä–µ–µ—Ö–∞–ª –ø–æ–µ–∑–¥–æ–º"
    },
    "üòú –≠–º–æ—Ü–∏–∏": {
        "–ø–æ—Ö–≤–∞–ª–∏—Ç—å": "–ø–æ—Ö–≤–∞–ª–∏–ª",
        "–ø–æ–¥–∫–æ–ª–æ—Ç—å": "–ø–æ–¥–∫–æ–ª–æ–ª",
        "—Å–æ–±–ª–∞–∑–Ω–∏—Ç—å": "—Å–æ–±–ª–∞–∑–Ω–∏–ª",
        "—É—Å–ø–æ–∫–æ–∏—Ç—å": "—É—Å–ø–æ–∫–æ–∏–ª"
    },
    "ü§∑‚Äç‚ôÇÔ∏è –†–∞–∑–Ω–æ–µ": {
        "—Ä–∞–∑–±—É–¥–∏—Ç—å": "—Ä–∞–∑–±—É–¥–∏–ª",
        "–Ω–∞–∫–æ—Ä–º–∏—Ç—å": "–Ω–∞–∫–æ—Ä–º–∏–ª",
        "–Ω–∞–∫—É—Ä–∏—Ç—å—Å—è": "–Ω–∞–∫—É—Ä–∏–ª—Å—è",
        "–∑–∞–±–∞–Ω–∏—Ç—å": "–∑–∞–±–∞–Ω–∏–ª",
        "–∑–∞–º—É—Ç–∏—Ç—å": "–∑–∞–º—É—Ç–∏–ª",
        "–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å": "–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª",
        "—Å–ø—Ä—è—Ç–∞—Ç—å –≤ –ø–æ–¥–≤–∞–ª–µ": "—Å–ø—Ä—è—Ç–∞–ª –≤ –ø–æ–¥–≤–∞–ª–µ",
        "–ø–æ–º–µ–Ω—è—Ç—å —É–≥–ª–∏ –≤ –∫–∞–ª—å—è–Ω–µ": "–ø–æ–º–µ–Ω—è–ª —É–≥–ª–∏ –≤ –∫–∞–ª—å—è–Ω–µ",
        "–¥–∞—Ç—å –≤–µ–π–ø": "–¥–∞–ª –≤–µ–π–ø",
        "–∞—Ä–µ—Å—Ç–æ–≤–∞—Ç—å": "–∞—Ä–µ—Å—Ç–æ–≤–∞–ª",
        "–ø–æ—Å–∞–¥–∏—Ç—å –≤ —Ç—é—Ä—å–º—É": "–ø–æ—Å–∞–¥–∏–ª –≤ —Ç—é—Ä—å–º—É"
    },
    "ü§Æ –ú–µ—Ä–∑–∫–æ–µ": {
        "–æ–±–æ—Å—Å–∞—Ç—å": "–æ–±–æ—Å—Å–∞–ª",
        "–æ–±–æ—Å—Ä–∞—Ç—å": "–æ–±–æ—Å—Ä–∞–ª"
    },
    "üòª –ú–∏–ª–æ–µ": {
        "–ø–æ–¥–∞—Ä–∏—Ç—å –∫–æ—Ç–∞": "–ø–æ–¥–∞—Ä–∏–ª –∫–æ—Ç–∞",
        "–ø–æ–¥–∞—Ä–∏—Ç—å —Å–æ–±–∞–∫—É": "–ø–æ–¥–∞—Ä–∏–ª —Å–æ–±–∞–∫—É"
    },
    "üòµ‚Äçüí´ –ö–∞–∫–æ–π –≥–µ–Ω–∏–π —ç—Ç–æ –ø—Ä–∏–¥—É–º—ã–≤–∞–ª?": {
        "—Ä–∞–Ω–¥–æ–º": "—Ä–∞–Ω–¥–æ–º",
        "—Å–∞—à–µ–Ω—å–∫–∞": "—Å–∞—à–µ–Ω—å–∫–∞"
    }
}
last_start_time = time.time()
hz = -1001921363567
PROMOCODES_FILE = "promocodes.json"
CASINO_SYMBOLS = ["üçí", "üçã", "üçä", "üçá", "üçâ", "7Ô∏è‚É£", "üîî", "üíé", "BAR"]
CASINO_MULTIPLIERS = {
    "3_same": 2.00,
    "2_same": 1.50,
    "all_different": 0.00,
    "1_bar": -0.50,
    "2_bars": -1.00,
    "3_bars": -2.00,
    "1_seven": 1.50,
    "2_sevens": 2.00,
    "3_sevens": 3.00
}

def migrate_user_data(user_id):
    data = load_user_data(user_id)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    new_fields = {
        'total_coins_earned': data.get('coins_from_messages', 0) + data.get('coins_from_transfers', 0),
        'total_coins_spent': data.get('coins_spent_transfers', 0),
        'coins_from_games': data.get('coins_from_games', 0),
        'coins_spent_games': data.get('coins_spent_games', 0),
        'casino_games_played': data.get('casino_games_played', 0),
        'roulette_games_played': data.get('roulette_games_played', 0),
        'last_cards': data.get('last_cards', [])[-5:]
    }
    
    for key, value in new_fields.items():
        if key not in data:
            data[key] = value
    
    save_user_data(user_id, data)

def migrate_all_users():
    for filename in os.listdir(DATA_FOLDER):
        if filename.endswith('.json'):
            user_id = filename.split('.')[0]
            migrate_user_data(user_id)

def generate_casino_result():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∑–∏–Ω–æ (3 —Å–∏–º–≤–æ–ª–∞)."""
    return [random.choice(CASINO_SYMBOLS) for _ in range(3)]

def calculate_multiplier(result):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞–∑–∏–Ω–æ."""
    multiplier = 1.00
    bars = result.count("BAR")
    sevens = result.count("7Ô∏è‚É£")
    unique_symbols = len(set(result))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    if unique_symbols == 1:  # –í—Å–µ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        multiplier = CASINO_MULTIPLIERS["3_same"]
    elif unique_symbols == 2:  # 2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        multiplier = CASINO_MULTIPLIERS["2_same"]
    else:  # –í—Å–µ —Ä–∞–∑–Ω—ã–µ
        multiplier = CASINO_MULTIPLIERS["all_different"]

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ BAR –∏ 7Ô∏è‚É£
    if bars == 1:
        multiplier += CASINO_MULTIPLIERS["1_bar"]
    elif bars == 2:
        multiplier += CASINO_MULTIPLIERS["2_bars"]
    elif bars == 3:
        multiplier += CASINO_MULTIPLIERS["3_bars"]

    if sevens == 1:
        multiplier += CASINO_MULTIPLIERS["1_seven"]
    elif sevens == 2:
        multiplier += CASINO_MULTIPLIERS["2_sevens"]
    elif sevens == 3:
        multiplier = CASINO_MULTIPLIERS["3_sevens"]  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å

    return max(0.00, multiplier)  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º

def backup_user_data():
    if not os.path.exists(DATA_FOLDER):
        return

    backup_folder = os.path.join(DATA_FOLDER, "backup")
    os.makedirs(backup_folder, exist_ok=True)

    timestamp = time.strftime("%Y%m%d_%H%M%S")
    for filename in os.listdir(DATA_FOLDER):
        if filename.endswith(".json") and not filename.startswith("backup"):
            src = os.path.join(DATA_FOLDER, filename)
            dst = os.path.join(backup_folder, f"{timestamp}_{filename}")
            shutil.copy2(src, dst)

def migrate_promocodes():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è."""
    promocodes = load_promocodes()
    changed = False
    
    for code, data in promocodes.items():
        if 'total_uses' not in data:
            data['total_uses'] = data.get('uses_left', 1)
            changed = True
        if 'used_by' not in data:
            data['used_by'] = []
            changed = True
        if 'creator_name' not in data:
            data['creator_name'] = "Unknown"
            changed = True
    
    if changed:
        save_promocodes(promocodes)
        print("–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

def notify_bot_started():
    global last_start_time
    last_start_time = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞

    try:
        bot.send_message(hz, "üöÄ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {hz}: {e}")

def ignore_old_messages(func):
    def wrapper(message, *args, **kwargs):
        global last_start_time
        
        if message.date < last_start_time:
            return
        
        return func(message, *args, **kwargs)
    
    return wrapper
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í —Å–µ–±—è" –∏ "–í –º–∞–Ω–µ–∫–µ–Ω"
def create_shoot_keyboard(user_id):
    markup = types.InlineKeyboardMarkup()
    btn_self = types.InlineKeyboardButton('üôã‚Äç‚ôÇÔ∏è –í —Å–µ–±—è', callback_data=f'roulette_shoot_self_{user_id}')
    btn_dummy = types.InlineKeyboardButton('üë§ –í –º–∞–Ω–µ–∫–µ–Ω', callback_data=f'roulette_shoot_dummy_{user_id}')
    markup.add(btn_self, btn_dummy)
    return markup

def load_json_with_defaults(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ 'exclusive_to' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º null, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    for item in data:
        if 'exclusive_to' not in item:
            item['exclusive_to'] = None  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
    
    return data

def get_top_messages():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_files = [f for f in os.listdir(DATA_FOLDER) if f.endswith('.json')]
    top_users = []

    for user_file in user_files:
        user_id = user_file.split('.')[0]
        data = load_user_data(user_id)
        message_count = data.get('message_count', 0)
        top_users.append({'user_id': user_id, 'value': message_count})

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    top_users.sort(key=lambda x: x['value'], reverse=True)
    return top_users[:10]

def get_top_coins():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–∏–Ω–æ–≤."""
    user_files = [f for f in os.listdir(DATA_FOLDER) if f.endswith('.json')]
    top_users = []

    for user_file in user_files:
        user_id = user_file.split('.')[0]
        data = load_user_data(user_id)
        balance = data.get('balance', 0)
        top_users.append({'user_id': user_id, 'value': balance})

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    top_users.sort(key=lambda x: x['value'], reverse=True)
    return top_users[:10]

def get_top_cases():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–µ–π—Å–æ–≤."""
    user_files = [f for f in os.listdir(DATA_FOLDER) if f.endswith('.json')]
    top_users = []

    for user_file in user_files:
        user_id = user_file.split('.')[0]
        data = load_user_data(user_id)
        case_count = data.get('case_count', 0)
        top_users.append({'user_id': user_id, 'value': case_count})

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    top_users.sort(key=lambda x: x['value'], reverse=True)
    return top_users[:10]

def get_top_cards():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ª—É—á—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ."""
    user_files = [f for f in os.listdir(DATA_FOLDER) if f.endswith('.json')]
    top_users = []

    for user_file in user_files:
        user_id = user_file.split('.')[0]
        data = load_user_data(user_id)
        best_card = data.get('best_card')
        if best_card:
            top_users.append({'user_id': user_id, 'value': best_card['q_coins'], 'card_name': best_card['name']})

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    top_users.sort(key=lambda x: x['value'], reverse=True)
    return top_users[:10]

def show_frame_by_index(message, frame_index):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    frame_info = frames[frame_index]
    
    markup = create_frame_keyboard(frame_index, user_id)
    avatar_file = get_user_avatar(bot, user_id)
    
    image_blob = create_framed_image(
        data['current_banner'], 
        avatar_file or "avatar.png", 
        frame_info['filename']
    )
    
    bot.send_photo(
        message.chat.id,
        image_blob,
        caption=format_frame_message(frame_info, frame_index),
        reply_markup=markup,
        parse_mode="Markdown"
    )

def show_banner_by_index(message, banner_index):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    banner_info = backgrounds[banner_index]
    
    markup = create_banner_keyboard(banner_index, user_id)
    avatar_file = get_user_avatar(bot, user_id)
    
    image_blob = create_framed_image(
        banner_info['filename'], 
        avatar_file or "avatar.png", 
        None
    )
    
    bot.send_photo(
        message.chat.id,
        image_blob,
        caption=format_banner_message(banner_info, banner_index),
        reply_markup=markup,
        parse_mode="Markdown"
    )

def show_underframe_by_index(message, underframe_index):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    underframe_info = underframes[underframe_index]
    
    markup = create_underframe_keyboard(underframe_index, user_id)
    avatar_file = get_user_avatar(bot, user_id)
    
    image_blob = create_banner_with_all(
        data['current_banner'],
        avatar_file or "avatar.png",
        data.get('current_frame'),
        underframe_info['filename']
    )
    
    bot.send_photo(
        message.chat.id,
        image_blob,
        caption=format_underframe_message(underframe_info, underframe_index),
        reply_markup=markup,
        parse_mode="Markdown"
    )
        
def get_all_rp_actions():
    all_actions = {}
    for category, actions in RP_ACTIONS.items():
        all_actions.update(actions)
    return all_actions

def load_admins():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(ADMINS_FILE):
        with open(ADMINS_FILE, 'w', encoding='utf-8') as f:
            json.dump({"owner_id": "–í–ê–®_–ê–ô–î–ò", "admins": [], "promo_admins": []}, f, ensure_ascii=False, indent=4)
    with open(ADMINS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—Ä–æ–º–æ-–∞–¥–º–∏–Ω–∞
def is_promo_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ-–∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
    admins_data = load_admins()
    user_id = str(user_id)
    return (user_id == admins_data["owner_id"] or 
            user_id in admins_data.get("promo_admins", []))

def load_promocodes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    if not os.path.exists(PROMOCODES_FILE):
        return {}
    
    try:
        with open(PROMOCODES_FILE, 'r', encoding='utf-8') as f:
            promocodes = json.load(f)
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        valid_promocodes = {}
        for code, data in promocodes.items():
            if not isinstance(data, dict):
                continue
                
            valid_data = {
                'amount': int(data.get('amount', 0)),
                'uses_left': int(data.get('uses_left', 0)),
                'total_uses': int(data.get('total_uses', data.get('uses_left', 0))),
                'created_by': str(data.get('created_by', '0')),
                'created_at': data.get('created_at', time.time()),
                'used_by': list(data.get('used_by', [])),
                'creator_name': str(data.get('creator_name', 'Unknown'))
            }
            
            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã (uses_left <= 0)
            if valid_data['uses_left'] > 0:
                valid_promocodes[code] = valid_data
                
        return valid_promocodes
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
        return {}

def save_promocodes(promocodes):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã, —É–¥–∞–ª—è—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö uses_left > 0
    active_promocodes = {
        code: data for code, data in promocodes.items() 
        if data.get('uses_left', 1) > 0
    }
    
    with open(PROMOCODES_FILE, 'w', encoding='utf-8') as f:
        json.dump(active_promocodes, f, ensure_ascii=False, indent=4)

def save_admins(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª."""
    with open(ADMINS_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def is_owner(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º."""
    admins_data = load_admins()
    return str(user_id) == admins_data["owner_id"]

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    admins_data = load_admins()
    return str(user_id) in admins_data["admins"] or is_owner(user_id)

if not os.path.exists(DATA_FOLDER):
    os.makedirs(DATA_FOLDER)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–ª—è 'exclusive_to'
backgrounds = load_json_with_defaults('backgrounds.json')
frames = load_json_with_defaults('frames.json')
underframes = load_json_with_defaults('underframes.json')

def load_user_data(user_id):
    file_path = os.path.join(DATA_FOLDER, f"{user_id}.json")
    defaults = {
        'balance': 0,
        'case_count': 0,
        'best_card': None,
        'last_case_time': 0,
        'last_gift_time': 0,
        'purchased_banners': [],
        'current_banner': DEFAULT_BANNER,
        'purchased_frames': [],
        'current_frame': None,
        'purchased_underframes': [],
        'current_underframe': None,
        'message_count': 0,
        'last_roulette_time': 0,
        'used_promocodes': [],
        'total_coins_earned': 0,
        'coins_from_messages': 0,
        'coins_from_transfers': 0,
        'coins_from_games': 0,
        'total_coins_spent': 0,
        'coins_spent_transfers': 0,
        'coins_spent_games': 0,
        'casino_games_played': 0,
        'roulette_games_played': 0,
        'last_cards': []
    }

    if not os.path.exists(file_path):
        return defaults

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - —Å–ª–æ–≤–∞—Ä—å
            if not isinstance(data, dict):
                raise ValueError("Invalid data format")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            for key, default_value in defaults.items():
                if key not in data:
                    data[key] = default_value
            
            return data

    except (json.JSONDecodeError, ValueError, IOError) as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é defaults.")
        return defaults

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
def save_user_data(user_id, data):
    file_path = os.path.join(DATA_FOLDER, f"{user_id}.json")
    temp_path = f"{file_path}.tmp"

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–∏—à–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(temp_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
        
        # –ó–∞—Ç–µ–º –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        if os.path.exists(file_path):
            os.replace(temp_path, file_path)
        else:
            os.rename(temp_path, file_path)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        if os.path.exists(temp_path):
            os.remove(temp_path)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º —à–∞–Ω—Å–æ–≤
def get_random_card(user_id):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å —É—á–µ—Ç–æ–º —à–∞–Ω—Å–æ–≤ (–±–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π)."""
    # –í–µ—Å–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏
    weighted_cards = [(card, card['chance']) for card in cards]
    cards_list, weights = zip(*weighted_cards)
    return random.choices(cards_list, weights=weights, k=1)[0]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–µ–π—Å–∞
def get_time_until_next_case(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–µ–π—Å–∞ (–±–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π)."""
    data = load_user_data(user_id)
    last_case_time = data.get('last_case_time', 0)  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    current_time = time.time()
    remaining_time = max(0, 600 - (current_time - last_case_time))  # –í—Å–µ–≥–¥–∞ 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
    minutes = int(remaining_time // 60)
    seconds = int(remaining_time % 60)
    return f"{minutes:02d}:{seconds:02d}"

def get_time_until_next_gift(user_id):
    data = load_user_data(user_id)
    last_gift_time = data.get('last_gift_time', 0)
    current_time = time.time()
    remaining_time = max(0, 86400 - (current_time - last_gift_time))  # 24 —á–∞—Å–∞ = 86400 —Å–µ–∫—É–Ω–¥
    hours = int(remaining_time // 3600)
    minutes = int((remaining_time % 3600) // 60)
    seconds = int(remaining_time % 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

def get_user_avatar(bot, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç io.BytesIO –æ–±—ä–µ–∫—Ç."""
    try:
        photos = bot.get_user_profile_photos(user_id, limit=1).photos
        if photos:
            photo = photos[0][-1]  # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è
            file_info = bot.get_file(photo.file_id)
            file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
            response = requests.get(file_url)
            response.raise_for_status()
            avatar_image = io.BytesIO(response.content)
            return avatar_image
        else:
            return None  # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
        return None

def create_banner_with_all(banner_filename, avatar_file, frame_filename, underframe_filename):
    try:
        banner = Image.open(banner_filename).resize((750, 500))

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
        avatar = Image.open(io.BytesIO(avatar_file.read())) if hasattr(avatar_file, 'read') else Image.open(avatar_file)
        avatar = avatar.resize((200, 200))

        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        mask = Image.new('L', (200, 200), 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((0, 0, 200, 200), fill=255)
        avatar = ImageOps.fit(avatar, mask.size, centering=(0.5, 0.5))
        avatar.putalpha(mask)

        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –Ω–∞ –±–∞–Ω–Ω–µ—Ä
        banner.paste(avatar, (275, 150), avatar) # Use avatar as mask
        
        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–¥—Ä–∞–º–Ω–∏–∫ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        if underframe_filename:
            underframe = Image.open(underframe_filename).resize((750, 500))
            banner = Image.alpha_composite(banner.convert("RGBA"), underframe.convert("RGBA"))  # Combine with alpha

        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ä–∞–º–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
        if frame_filename:
            frame = Image.open(frame_filename).resize((750, 500)).convert("RGBA")
            banner = Image.alpha_composite(banner.convert("RGBA"), frame)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        img_byte_arr = io.BytesIO()
        banner.save(img_byte_arr, format='PNG')
        img_byte_arr = img_byte_arr.getvalue()
        return img_byte_arr

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None
        
def create_framed_image(banner_filename, avatar_file, frame_filename):
       try:
           with Image(filename=banner_filename, resolution=300) as banner:
               banner.resize(750, 500)

               with Image(file=avatar_file) as avatar:
                   avatar.resize(200, 200)

                   # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –≤ —Ñ–æ—Ä–º–µ –∫—Ä—É–≥–∞
                   with Image(width=200, height=200, background=Color('transparent')) as mask:
                       with Drawing() as draw:
                           draw.fill_color = Color('white')
                           draw.circle((100, 100), (100, 0))  # –ö—Ä—É–≥ –≤ —Ü–µ–Ω—Ç—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                           draw(mask)

                       # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –∞–≤–∞—Ç–∞—Ä–∫–µ
                       avatar.composite(mask, left=0, top=0, operator='dst_in')

                   # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –Ω–∞ –±–∞–Ω–Ω–µ—Ä
                   banner.composite(avatar, left=275, top=150)

               # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ä–∞–º–∫—É –Ω–∞ –±–∞–Ω–Ω–µ—Ä
               if frame_filename:
                   with Image(filename=frame_filename) as frame:
                       frame.resize(750, 500)
                       banner.composite(frame, left=0, top=0)

               banner.format = 'png'
               return banner.make_blob()

       except Exception as e:
           print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–º–∫–æ–π: {e}")
           return None
           
def format_frame_message(frame_info, frame_index):
    return (
        f"üî≤ *–†–∞–º–∫–∞ #`{frame_index + 1}` \"{frame_info['name']}\"*\n\n\n"
        f"üí∞ _–¶–µ–Ω–∞ ‚Äì {frame_info.get('price', 0)} Q –∫–æ–∏–Ω–æ–≤_\n\n"
        f"¬© _–ê–≤—Ç–æ—Ä ‚Äì `{frame_info.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}`_\n\n"
        f"üìñ _–û–ø–∏—Å–∞–Ω–∏–µ:_\n"
        f"_{frame_info['description']}_"
    )
    
def create_frame_keyboard(frame_index, user_id):
    data = load_user_data(user_id)
    frame_info = frames[frame_index]
    frame_filename = frame_info['filename']
    is_purchased = frame_filename in data['purchased_frames']

    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'frame_back_{frame_index}_{user_id}')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ä–∞–º–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if frame_info.get('exclusive_to') is None or str(frame_info['exclusive_to']) == user_id:
        if is_purchased:
            btn_buy = types.InlineKeyboardButton('‚úÖ', callback_data=f'frame_wear_{frame_index}_{user_id}')
        else:
            btn_buy = types.InlineKeyboardButton(f'üí∞', callback_data=f'frame_buy_{frame_index}_{user_id}')
    else:
        # –ï—Å–ª–∏ —Ä–∞–º–∫–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –∏ –Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å" –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        btn_buy = types.InlineKeyboardButton('üîí', callback_data='no_access')

    btn_next = types.InlineKeyboardButton('‚û°Ô∏è', callback_data=f'frame_next_{frame_index}_{user_id}')
    markup.add(btn_back, btn_buy, btn_next)
    return markup
    
def create_framed_image(banner_filename, avatar_file, frame_filename):
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
        banner = Image.open(banner_filename).resize((750, 500))

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
        avatar = Image.open(io.BytesIO(avatar_file.read())) if hasattr(avatar_file, 'read') else Image.open(avatar_file)
        avatar = avatar.resize((200, 200))

        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        mask = Image.new('L', (200, 200), 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((0, 0, 200, 200), fill=255)
        avatar = ImageOps.fit(avatar, mask.size, centering=(0.5, 0.5))
        avatar.putalpha(mask)

        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –Ω–∞ –±–∞–Ω–Ω–µ—Ä
        banner.paste(avatar, (275, 150), avatar)

        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ä–∞–º–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
        if frame_filename:
            frame = Image.open(frame_filename).resize((750, 500)).convert("RGBA")
            banner = Image.alpha_composite(banner.convert("RGBA"), frame)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        img_byte_arr = io.BytesIO()
        banner.save(img_byte_arr, format='PNG')
        img_byte_arr = img_byte_arr.getvalue()
        return img_byte_arr

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–º–∫–æ–π: {e}")
        return None
        
def give_coins(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥–∞—á–∏ Q –∫–æ–∏–Ω–æ–≤."""

    if not message.reply_to_message:
        bot.reply_to(message, "‚ö†Ô∏è–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–∏–Ω—ã.")
        return

    # –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏:
    giver_id = str(message.from_user.id)
    giver_data = load_user_data(giver_id)  #     –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    receiver_id = str(message.reply_to_message.from_user.id)
    receiver_data = load_user_data(receiver_id)

    if giver_id == receiver_id:
        bot.reply_to(message, "‚ö†Ô∏è–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–æ–∏–Ω—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ö†Ô∏è–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–∞—Ç—å 1000' –∏–ª–∏ '–¥–∞—Ç—å –≤—Å–µ').")
        return

    amount_str = parts[1].lower()
    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    giver_data['coins_spent_transfers'] += amount
    giver_data['total_coins_spent'] += amount
    receiver_data['coins_from_transfers'] += amount
    receiver_data['total_coins_earned'] += amount


    if amount_str == '–≤—Å–µ' or amount_str == '–≤—Å—ë':
        amount = giver_balance  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–∏–Ω—ã
    else:
        try:
            amount = int(amount_str)
            if amount <= 0:
                bot.reply_to(message, "‚ö†Ô∏è–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–≤—Å–µ/–≤—Å—ë'.")
            return

    if giver_balance < amount:
        bot.reply_to(message, "‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Q –∫–æ–∏–Ω–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    receiver_data = load_user_data(receiver_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    giver_data['balance'] -= amount
    receiver_data['balance'] += amount
    
    save_user_data(giver_id, giver_data)
    save_user_data(receiver_id, receiver_data)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
    if 99 <= amount <= 999:
        sticker = STICKER_RANGE_1
    elif 1000 <= amount <= 4999:
        sticker = STICKER_RANGE_2
    elif 5000 <= amount <= 9999:
        sticker = STICKER_RANGE_3
    else:
        sticker = STICKER_RANGE_4

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    giver_name = message.from_user.first_name
    receiver_name = message.reply_to_message.from_user.first_name
    response_message = f"üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! {receiver_name}!\n\nüéÅ–¢—ã –ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç {giver_name} –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} Q –∫–æ–∏–Ω–æ–≤"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    bot.send_sticker(message.chat.id, sticker, reply_to_message_id=message.reply_to_message.message_id)
    bot.send_message(message.chat.id, response_message, reply_to_message_id=message.reply_to_message.message_id)
    
RANK_DEFINITIONS = {
    "–ù–æ–≤–∏—á–æ–∫": (0, 149),
    "–ê–∫—Ç–∏–≤–Ω—ã–π": (150, 499),
    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": (500, 999),
    "–ó–Ω–∞–∫–æ–º—ã–π –°–µ–±–∞—Å—Ç—å—è–Ω–∞": (1000, 4999),
    "–ó–Ω–∞–∫–æ–º—ã–π –ü–µ–∏–Ω—Ç–µ—Ä–∞": (5000, 7499),
    "–õ—é–±–æ–ø—ã—Ç–Ω—ã–π —Å–≤–µ—Ç": (7500, 9499),
    "–û–∑–æ—Ä–Ω–æ–π —Å–≤–µ—Ç": (9500, 12999),
    "–ü—É—Ç–µ–≤–æ–¥–Ω—ã–π —Å–≤–µ—Ç": (13000, 19999),
    "–î—Ä—É–≥ –°–µ–±–∞—Å—Ç—å—è–Ω–∞": (20000, 49999),
    "–î—Ä—É–≥ –ü–µ–∏–Ω—Ç–µ—Ä–∞": (50000, 99999),
    "–ê–Ω–≥–µ–ª-—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —á–∞—Ç–∞": (100000, float('inf'))  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
}

def get_user_rank(message_count):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    for rank, (min_messages, max_messages) in RANK_DEFINITIONS.items():
        if min_messages <= message_count <= max_messages:
            return rank
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–Ω–≥"  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

def update_message_count(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = str(user_id)
    data = load_user_data(user_id)
    if 'message_count' not in data:
        data['message_count'] = 0
    data['message_count'] += 1
    save_user_data(user_id, data)

    return data['message_count']

def give_coins_for_message(user_id, message_text):
    user_id = str(user_id)
    data = load_user_data(user_id)
    coins_to_add = len(message_text) // 2
    
    data['balance'] += coins_to_add
    data['coins_from_messages'] += coins_to_add
    data['total_coins_earned'] += coins_to_add  # –í–∞–∂–Ω–æ!
    save_user_data(user_id, data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
    
    return coins_to_add   

def format_underframe_message(underframe_info, underframe_index):
    return (
        f"üß± *–ü–æ–¥—Ä–∞–º–∫–∞ #`{underframe_index + 1}` \"{underframe_info['name']}\"*\n\n\n"
        f"üí∞ _–¶–µ–Ω–∞ ‚Äì {underframe_info.get('price', 0)} Q –∫–æ–∏–Ω–æ–≤_\n\n"
        f"¬© _–ê–≤—Ç–æ—Ä ‚Äì `{underframe_info.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}`_\n\n"
        f"üìñ _–û–ø–∏—Å–∞–Ω–∏–µ:_\n"
        f"_{underframe_info['description']}_"
    )

def create_underframe_keyboard(underframe_index, user_id):
    data = load_user_data(user_id)
    underframe_info = underframes[underframe_index]
    underframe_filename = underframe_info['filename']
    is_purchased = underframe_filename in data['purchased_underframes']

    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'underframe_back_{underframe_index}_{user_id}')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ–¥—Ä–∞–º–Ω–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if underframe_info.get('exclusive_to') is None or str(underframe_info['exclusive_to']) == user_id:
        if is_purchased:
            btn_buy = types.InlineKeyboardButton('‚úÖ', callback_data=f'underframe_wear_{underframe_index}_{user_id}')
        else:
            btn_buy = types.InlineKeyboardButton(f'üí∞', callback_data=f'underframe_buy_{underframe_index}_{user_id}')
    else:
        # –ï—Å–ª–∏ –ø–æ–¥—Ä–∞–º–Ω–∏–∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∏ –Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å" –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        btn_buy = types.InlineKeyboardButton('üîí', callback_data='no_access')

    btn_next = types.InlineKeyboardButton('‚û°Ô∏è', callback_data=f'underframe_next_{underframe_index}_{user_id}')
    markup.add(btn_back, btn_buy, btn_next)
    return markup
    
def create_help_message():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    help_message = """
**__–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:**__    

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è:**
**__–ë–∞–ª–∞–Ω—Å:__**  
‚Äì `–±–∏–æ`; `–±–∞–ª–∏–∫`; `–±–∞–ª–∞–Ω—Å`; `–±–∞–ª`; `–ø—Ä–æ—Ñ`; `–ø—Ä–æ—Ñ–∏–ª—å`; `–∫—Ç–æ —è`

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:**
**__–ö–µ–π—Å—ã:__**  
‚Äì `–∫–µ–π—Å`; `–∫`; `–∫–∞—Å–∏–∫`; `–∫–µ–π—Å–∏–∫`; `–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å`; `–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å`; `–∫–µ–π—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞`; `–ø–∞–∏–Ω—Ç–µ—Ä`; `/crate`; `/case`; `/crate@BotPAInter_Q_bot`

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:**
**__–ë–æ–Ω—É—Å:__**  
‚Äì `–±–æ–Ω—É—Å`; `–ø—Ä–∏–∑`; `–≥–∏—Ñ—Ç`; `–ø–æ–¥–∞—Ä–æ–∫`; `/gift`

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏:**
**__–†—É–ª–µ—Ç–∫–∞:__**  
‚Äì `—Ä–ª`; `—Ä—É–ª–µ—Ç–∫–∞`; `—Ä—É–ª–µ—Ç`  
‚Äì `.—Ä–ª —Å—Ç–æ–ø`; `.—Ä–ª –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`; `.—Ä–ª –∑–∞–±—Ä–∞—Ç—å`  
‚Äì `.—Ä—É–ª–µ—Ç–∫–∞ —Å—Ç–æ–ø`; `.—Ä—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`; `.—Ä—É–ª–µ—Ç–∫–∞ –∑–∞–±—Ä–∞—Ç—å`  
‚Äì `.—Ä—É–ª–µ—Ç —Å—Ç–æ–ø`; `.—Ä—É–ª–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`; `.—Ä—É–ª–µ—Ç –∑–∞–±—Ä–∞—Ç—å`

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–∞–Ω–Ω–µ—Ä–æ–≤:**
**__–ë–∞–Ω–Ω–µ—Ä—ã:__**  
‚Äì `–±–∞–Ω–µ—Ä`; `–±–∞–Ω–Ω–µ—Ä`; `—Ñ–æ–Ω`; `–±–≥`; `–±–µ–∫–≥—Ä–∞—É–Ω–¥`; `/banner`

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–º–æ–∫:**
**__–†–∞–º–∫–∏:__**  
‚Äì `—Ä–∞–º–∫–∏`; `—Ä–∞–º–∫–∞`; `/frame`

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥—Ä–∞–º–Ω–∏–∫–æ–≤:**
**__–ü–æ–¥—Ä–∞–º–Ω–∏–∫–∏:__**  
‚Äì `–ø–æ–¥—Ä–∞–º–Ω–∏–∫–∏`; `–ø–æ–¥—Ä–∞–º–Ω–∏–∫`; `–ø–æ–¥—Ä–∞–º–∫–∞`; `–ø–æ–¥—Ä–∞–º–∫–∏`

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–∏–Ω–æ–≤:**
**__–ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–∏–Ω–æ–≤:__**  
‚Äì `–æ—Ç–¥–∞—Ç—å`; `–ø–µ—Ä–µ–¥–∞—Ç—å`; `–¥–∞—Ç—å`; `–ø–æ–¥–∞—Ä–∏—Ç—å`; `–≥–∏–≤`  
–ü—Ä–∏–º–µ—Ä: `–¥–∞—Ç—å 1000` –∏–ª–∏ `–≥–∏–≤ –≤—Å–µ/–≤—Å—ë`

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
**__–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:__**  
‚Äì `+–∞–¥–º`; `+–∞–¥–º–∏–Ω` (–¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)  
‚Äì `-–∞–¥–º`; `-–∞–¥–º–∏–Ω` (—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)  
‚Äì `–∞–¥–º–∏–Ω—ã`; `–∫—Ç–æ –∞–¥–º–∏–Ω`; `—Å—Ç–∞—Ñ—Ñ` (—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤:**
**__–†–µ–ø–æ—Ä—Ç:__**  
‚Äì `—Ä–µ–ø–æ—Ä—Ç` (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –†–ü-–¥–µ–π—Å—Ç–≤–∏–π:**
**__–†–ü-–¥–µ–π—Å—Ç–≤–∏—è:__**  
‚Äì `—Ä–ø` (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)  
‚Äì `–¥–µ–π—Å—Ç–≤–∏—è` (—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –†–ü-–¥–µ–π—Å—Ç–≤–∏–π)

---

### **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**
**__–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:__**  
‚Äì `–ø–∞–∏–Ω—Ç–µ—Ä –∏–Ω—Ñ–∞`; `–ø–∞–∏–Ω—Ç–µ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å`; `–ø—Ä–∏–Ω—Ç–µ—Ä –∏–Ω—Ñ–∞`; `–ø—Ä–∏–Ω—Ç–µ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å`  
–ü—Ä–∏–º–µ—Ä: `–ø–∞–∏–Ω—Ç–µ—Ä –∏–Ω—Ñ–∞ —è —Å—Ç–∞–Ω—É –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º`
"""
    return help_message
    
def format_banner_message(banner_info, banner_index):
    return (
        f"üó∫ *–ë–∞–Ω–Ω–µ—Ä #`{banner_index + 1}` \"{banner_info['name']}\"*\n\n\n"
        f"üí∞ _–¶–µ–Ω–∞ ‚Äì {banner_info.get('price', 0)} Q –∫–æ–∏–Ω–æ–≤_\n\n"
        f"¬© _–ê–≤—Ç–æ—Ä ‚Äì `{banner_info.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}`_\n\n"
        f"üìñ _–û–ø–∏—Å–∞–Ω–∏–µ:_\n"
        f"{banner_info['description']}"
    )

@bot.callback_query_handler(func=lambda call: call.data == 'no_access')
def handle_no_access(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîí –≠–∫—Å–∫–ª—é–∑–∏–≤"."""
    bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('underframe_'))
def underframe_callback_handler(call):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ —á–∞—Å—Ç–∏
        action, underframe_index, user_id_str = call.data.split('_')[1], int(call.data.split('_')[2]), call.data.split('_')[3]
        user_id = str(call.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–º, –∫–æ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
        if user_id != user_id_str:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!")
            return

        data = load_user_data(user_id)
        underframe_index = int(underframe_index)
        num_underframes = len(underframes)

        if action == 'back':
            underframe_index = (underframe_index - 1) % num_underframes
        elif action == 'next':
            underframe_index = (underframe_index + 1) % num_underframes
        elif action == 'buy':
            underframe_info = underframes[underframe_index]
            if data['balance'] >= underframe_info['price']:
                data['balance'] -= underframe_info['price']
                underframe_filename = underframe_info['filename']
                if 'purchased_underframes' not in data:
                    data['purchased_underframes'] = []
                if underframe_filename not in data['purchased_underframes']:
                    data['purchased_underframes'].append(underframe_filename)
                save_user_data(user_id, data)
                bot.answer_callback_query(call.id, "–ü–æ–¥—Ä–∞–º–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!")
            else:
                bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Q –∫–æ–∏–Ω–æ–≤!")
        elif action == 'wear':
            underframe_info = underframes[underframe_index]
            underframe_filename = underframe_info['filename']
            data['current_underframe'] = underframe_filename
            save_user_data(user_id, data)
            bot.answer_callback_query(call.id, "–ü–æ–¥—Ä–∞–º–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–¥–µ—Ç!")

        markup = create_underframe_keyboard(underframe_index, user_id)
        underframe_info = underframes[underframe_index]
        underframe_filename = underframe_info['filename']
        avatar_file = get_user_avatar(bot, user_id)

        banner_filename = data['current_banner']
        frame_filename = data.get('current_frame')

        if avatar_file:
            image_blob = create_banner_with_all(banner_filename, avatar_file, frame_filename, underframe_filename)
        else:
            image_blob = create_banner_with_all(banner_filename, "avatar.png", frame_filename, underframe_filename)

        if image_blob:
            bot.edit_message_media(
                media=types.InputMediaPhoto(image_blob, caption=format_underframe_message(underframe_info)),
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ underframe_callback_handler: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@bot.message_handler(func=lambda message: message.text.lower() in ['–ø–æ–¥—Ä–∞–º–Ω–∏–∫–∏', '–ø–æ–¥—Ä–∞–º–Ω–∏–∫', '–ø–æ–¥—Ä–∞–º–∫–∞', '–ø–æ–¥—Ä–∞–º–∫–∏'])
@ignore_old_messages
def show_underframe_menu(message):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    current_underframe_index = 0
    markup = create_underframe_keyboard(current_underframe_index, user_id)
    underframe_info = underframes[current_underframe_index]
    underframe_filename = underframe_info['filename']

    avatar_file = get_user_avatar(bot, user_id)

    banner_filename = data['current_banner']
    frame_filename = data.get('current_frame')

    if avatar_file:
        image_blob = create_banner_with_all(banner_filename, avatar_file, frame_filename, underframe_filename)
    else:
        image_blob = create_banner_with_all(banner_filename, "avatar.png", frame_filename, underframe_filename)

    if image_blob:
        bot.send_photo(message.chat.id, image_blob, caption=format_underframe_message(underframe_info), reply_markup=markup)
    else:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")

@bot.message_handler(func=lambda message: message.text.lower().startswith(('–ø–æ–¥—Ä–∞–º–Ω–∏–∫–∏', '–ø–æ–¥—Ä–∞–º–Ω–∏–∫', '–ø–æ–¥—Ä–∞–º–∫–∞', '–ø–æ–¥—Ä–∞–º–∫–∏')))
@ignore_old_messages
def handle_underframe_command(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ '–ø–æ–¥—Ä–∞–º–Ω–∏–∫ 2'."""
    parts = message.text.lower().split()
    if len(parts) == 2 and parts[1].isdigit():
        underframe_index = int(parts[1]) - 1  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        show_underframe_by_index(message, underframe_index)
    else:
        show_underframe_menu(message)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
@ignore_old_messages
def help_command(message):
    bot.reply_to(message, create_help_message(), parse_mode="Markdown")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–º–æ—â–∏
@bot.message_handler(func=lambda message: message.text.lower() in ['—Ö–µ–ª–ø', '–ø–æ–º–æ—â—å', '–ø–æ–º–æ–≥–∏—Ç–µ'])
@ignore_old_messages
def text_help_command(message):
    bot.reply_to(message, create_help_message(), parse_mode="Markdown")
    
@bot.message_handler(func=lambda message: message.reply_to_message and message.text.lower().startswith(('–æ—Ç–¥–∞—Ç—å', '–ø–µ—Ä–µ–¥–∞—Ç—å', '–¥–∞—Ç—å', '–ø–æ–¥–∞—Ä–∏—Ç—å', '–≥–∏–≤')))
@ignore_old_messages
def handle_give_coins(message):
    give_coins(bot, message)

@bot.message_handler(func=lambda message: message.text.lower() in ['—Ä–∞–º–∫–∏', '—Ä–∞–º–∫–∞', '/frame'])
@ignore_old_messages
def show_frame_menu(message):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    current_frame_index = 0
    markup = create_frame_keyboard(current_frame_index, user_id)
    frame_info = frames[current_frame_index]
    frame_filename = frame_info['filename']

    avatar_file = get_user_avatar(bot, user_id)

    if avatar_file:
        image_blob = create_framed_image(data['current_banner'], avatar_file, frame_filename)
    else:
        image_blob = create_framed_image(data['current_banner'], "avatar.png", frame_filename)

    if image_blob:
        bot.send_photo(message.chat.id, image_blob, caption=format_frame_message(frame_info), reply_markup=markup)
    else:
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–º–∫–æ–π.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('frame_'))
def frame_callback_handler(call):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ —á–∞—Å—Ç–∏
        action, frame_index, user_id_str = call.data.split('_')[1], int(call.data.split('_')[2]), call.data.split('_')[3]
        user_id = str(call.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–º, –∫–æ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
        if user_id != user_id_str:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!")
            return

        data = load_user_data(user_id)
        frame_index = int(frame_index)
        num_frames = len(frames)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        if action == 'back':
            frame_index = (frame_index - 1) % num_frames
        elif action == 'next':
            frame_index = (frame_index + 1) % num_frames
        elif action == 'buy':
            frame_info = frames[frame_index]
            if data['balance'] >= frame_info['price']:
                data['balance'] -= frame_info['price']
                frame_filename = frame_info['filename']
                if 'purchased_frames' not in data:
                    data['purchased_frames'] = []
                if frame_filename not in data['purchased_frames']:
                    data['purchased_frames'].append(frame_filename)
                save_user_data(user_id, data)
                bot.answer_callback_query(call.id, "–†–∞–º–∫–∞ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞!")
            else:
                bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Q –∫–æ–∏–Ω–æ–≤!")
                return
        elif action == 'wear':
            frame_info = frames[frame_index]
            frame_filename = frame_info['filename']
            data['current_frame'] = frame_filename
            save_user_data(user_id, data)
            bot.answer_callback_query(call.id, "–†–∞–º–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–¥–µ—Ç–∞!")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        frame_info = frames[frame_index]
        markup = create_frame_keyboard(frame_index, user_id)
        new_caption = format_frame_message(frame_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_caption = call.message.caption
        current_markup = call.message.reply_markup

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
        if (current_caption == new_caption and 
            str(current_markup) == str(markup)):
            bot.answer_callback_query(call.id)
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        avatar_file = get_user_avatar(bot, user_id)
        frame_filename = frame_info['filename']
        
        if avatar_file:
            image_blob = create_framed_image(data['current_banner'], avatar_file, frame_filename)
        else:
            image_blob = create_framed_image(data['current_banner'], "avatar.png", frame_filename)

        if not image_blob:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.edit_message_media(
                media=types.InputMediaPhoto(image_blob, caption=new_caption),
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
        except Exception as edit_error:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            try:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                bot.send_photo(
                    chat_id=call.message.chat.id,
                    photo=image_blob,
                    caption=new_caption,
                    reply_markup=markup
                )
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as send_error:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ frame_callback_handler: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass
        
@bot.message_handler(func=lambda message: message.text.lower().startswith(('—Ä–∞–º–∫–∞', '—Ä–∞–º–∫–∏', '/frame')))
@ignore_old_messages
def handle_frame_command(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ '—Ä–∞–º–∫–∞ 6'."""
    parts = message.text.lower().split()
    if len(parts) == 2 and parts[1].isdigit():
        frame_index = int(parts[1]) - 1  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        show_frame_by_index(message, frame_index)
    else:
        show_frame_menu(message)

@bot.message_handler(func=lambda message: message.text.lower() in ['–±', '–±–∏–æ', '–±–∞–ª–∞–Ω—Å', '–±–∞–ª–∏–∫', '–±–∞–ª', '–ø—Ä–æ—Ñ', '–ø—Ä–æ—Ñ–∏–ª—å', '–∫—Ç–æ —è'])
@ignore_old_messages
def send_balance(message):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    best_card = data.get('best_card')
    time_until_next_case = get_time_until_next_case(user_id)
    message_count = data.get('message_count', 0)
    rank = get_user_rank(message_count)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üí∞ *–ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ {rank} {message.from_user.first_name} [*`{user_id}`*]:*\n\n\n"
        f"üí∏ _Q –∫–æ–∏–Ω—ã ‚Äì {data['balance']}_\n\n"
        f"üí¨ _–ù–∞–ø–∏—Å–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äì {message_count}_\n\n"
        f"üì¶ _–û—Ç–∫—Ä—ã—Ç–æ –∫–µ–π—Å–æ–≤ ‚Äì {data['case_count']}_\n\n"
        f"üé¥ _–ù–∞–∏–ª—É—á—à–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ ‚Äì {best_card['name'] if best_card else '–ù–µ—Ç'}_\n\n"
        f"‚è≥ _–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–µ–π—Å–∞ ‚Äì {time_until_next_case}_\n\n\n"
        f"‚ùóÔ∏è *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ* `–∏–Ω—Ñ–∞`."
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    avatar_file = get_user_avatar(bot, user_id)
    image_blob = create_banner_with_all(
        data['current_banner'],
        avatar_file or "avatar.png",
        data.get('current_frame'),
        data.get('current_underframe')
    )

    if image_blob:
        bot.send_photo(message.chat.id, image_blob, caption=profile_text, parse_mode="Markdown")
    else:
        bot.reply_to(message, profile_text, parse_mode="Markdown")

def get_item_info(filename, items_list):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    if not filename:
        return None, None
    for item in items_list:
        if item['filename'] == filename:
            return item['name'], item.get('price')
    return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", 0

@bot.message_handler(func=lambda message: message.text.lower() in ['–∫–µ–π—Å', '–∫', '–∫–∞—Å–∏–∫', '–∫–µ–π—Å–∏–∫', '–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', '–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å', '–∫–µ–π—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–ø–∞–∏–Ω—Ç–µ—Ä', '/crate', '/case', '/crate@BotPAInter_Q_bot'])
@ignore_old_messages
def open_case(message):
    user_id = str(message.from_user.id)
    current_time = time.time()
    data = load_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    last_case_time = data.get('last_case_time', 0)
    if current_time - last_case_time < 600:
        remaining_time = 600 - (current_time - last_case_time)
        minutes = int(remaining_time // 60)
        seconds = int(remaining_time % 60)
        bot.reply_to(message, f"‚è≥ –ö–µ–π—Å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç. –û—Å—Ç–∞–ª–æ—Å—å: {minutes:02d}:{seconds:02d}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    card = get_random_card(user_id)
    time_until_next_case = get_time_until_next_case(user_id)
    rank = get_user_rank(data['message_count'])
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data['last_case_time'] = current_time
    data['balance'] += card['q_coins']
    data['case_count'] += 1
    data['total_coins_earned'] += card['q_coins']
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–π –∫–∞—Ä—Ç—ã
    if not data['best_card'] or card['q_coins'] > data['best_card']['q_coins']:
        data['best_card'] = card
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞—Ä—Ç
    data['last_cards'] = data.get('last_cards', [])[-4:] + [card]
    save_user_data(user_id, data)  # –í–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    response = (
        f"üé¥ *{rank} {message.from_user.first_name}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É \"{card['name']}\"!*\n\n\n"
        f"üí∏ _–û–Ω–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ —Ç–µ–±–µ {card['q_coins']} Q –∫–æ–∏–Ω–æ–≤_\n\n"
        f"üß¨ _–ï—ë —Ä–µ–¥–∫–æ—Å—Ç—å ‚Äì {card['rarity']}_\n\n"
        f"üì¶ _–≠—Ç–æ —Ç–≤–æ–π {data['case_count']} –∫–µ–π—Å –ø–æ —Å—á–µ—Ç—É_\n\n"
        f"‚è≥ _–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–µ–π—Å–∞ ‚Äì {time_until_next_case}_"
    )
    
    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    max_attempts = 3
    success = False
    file_path = os.path.join(os.path.dirname(__file__), card['filename'])
    
    for attempt in range(1, max_attempts+1):
        try:
            if card['type'] == 'photo':
                with open(file_path, 'rb') as photo:
                    bot.send_photo(message.chat.id, photo, caption=response, parse_mode="Markdown")
            elif card['type'] == 'video':
                with open(file_path, 'rb') as video:
                    bot.send_video(message.chat.id, video, caption=response, parse_mode="Markdown")
            
            success = True
            break
        except Exception as e:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –æ—à–∏–±–∫–∞: {str(e)}")
            if attempt < max_attempts:
                time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–∏
    if not success:
        error_msg = (
            f"‚ö†Ô∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!*\n\n"
            f"–ö–∞—Ä—Ç–æ—á–∫–∞: {card['name']} ({card['rarity']})\n"
            f"Q –∫–æ–∏–Ω—ã: +{card['q_coins']} –±—ã–ª–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        bot.reply_to(message, error_msg, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text.lower() in ['–±–æ–Ω—É—Å', '–ø—Ä–∏–∑', '–≥–∏—Ñ—Ç', '–ø–æ–¥–∞—Ä–æ–∫', '/gift'])
@ignore_old_messages
def get_daily_gift(message):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    current_time = time.time()
    last_gift_time = data.get('last_gift_time', 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
    if current_time - last_gift_time < 86400:
        remaining_time = 86400 - (current_time - last_gift_time)
        hours = int(remaining_time // 3600)
        minutes = int((remaining_time % 3600) // 60)
        seconds = int(remaining_time % 60)
        bot.reply_to(message, f"‚è≥–í—ã —É–∂–µ –∑–∞–±–∏—Ä–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ {hours:02d}:{minutes:02d}:{seconds:02d}.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤
    gift_amount = random.randint(100, 1000)  # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 50 –¥–æ 200
    data['balance'] += gift_amount
    data['last_gift_time'] = current_time
    save_user_data(user_id, data)

    bot.reply_to(message, f"üéÅ–í—ã –∑–∞–±—Ä–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {gift_amount} Q –∫–æ–∏–Ω–æ–≤!")

@bot.message_handler(func=lambda message: message.text.lower() in ['–±–∞–Ω–µ—Ä', '–±–∞–Ω–Ω–µ—Ä', '—Ñ–æ–Ω', '–±–≥', '–±–µ–∫–≥—Ä–∞—É–Ω–¥', '/banner'])
@ignore_old_messages
def show_banner_menu(message):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    current_banner_index = 0  # –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
    markup = create_banner_keyboard(current_banner_index, user_id)
    banner_info = backgrounds[current_banner_index]
    banner_filename = banner_info['filename']

    avatar_file = get_user_avatar(bot, user_id)

    if avatar_file:
        image_blob = create_framed_image(banner_filename, avatar_file, None)
    else:
        image_blob = create_framed_image(banner_filename, "avatar.png", None)

    if image_blob:
        # –ü–µ—Ä–µ–¥–∞–µ–º banner_index –≤ format_banner_message
        bot.send_photo(
            message.chat.id,
            image_blob,
            caption=format_banner_message(banner_info, current_banner_index),
            reply_markup=markup
        )
    else:
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–∞–Ω–Ω–µ—Ä–∞
def create_banner_keyboard(banner_index, user_id):
    data = load_user_data(user_id)
    banner_info = backgrounds[banner_index]
    banner_filename = banner_info['filename']
    is_purchased = banner_filename in data['purchased_banners'] or banner_filename == 'default_banner.jpg'

    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'banner_back_{banner_index}_{user_id}')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –±–∞–Ω–Ω–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if banner_info.get('exclusive_to') is None or str(banner_info['exclusive_to']) == user_id:
        if is_purchased:
            btn_buy = types.InlineKeyboardButton('‚úÖ–û–¥–µ—Ç—å', callback_data=f'banner_wear_{banner_index}_{user_id}')
        else:
            btn_buy = types.InlineKeyboardButton(f'üí∞–ö—É–ø–∏—Ç—å ({banner_info["price"]} Q)', callback_data=f'banner_buy_{banner_index}_{user_id}')
    else:
        # –ï—Å–ª–∏ –±–∞–Ω–Ω–µ—Ä —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∏ –Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å" –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        btn_buy = types.InlineKeyboardButton('üîí –≠–∫—Å–∫–ª—é–∑–∏–≤', callback_data='no_access')

    btn_next = types.InlineKeyboardButton('‚û°Ô∏è', callback_data=f'banner_next_{banner_index}_{user_id}')
    markup.add(btn_back, btn_buy, btn_next)
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith('banner_'))
def banner_callback_handler(call):
    try:
        action, banner_index, user_id_str = call.data.split('_')[1], int(call.data.split('_')[2]), call.data.split('_')[3]
        user_id = str(call.from_user.id)

        if user_id != user_id_str:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!")
            return

        data = load_user_data(user_id)
        banner_index = int(banner_index)
        num_banners = len(backgrounds)

        if action == 'back':
            banner_index = (banner_index - 1) % num_banners
        elif action == 'next':
            banner_index = (banner_index + 1) % num_banners
        elif action == 'buy':
            banner_info = backgrounds[banner_index]
            if data['balance'] >= banner_info['price']:
                data['balance'] -= banner_info['price']
                banner_filename = banner_info['filename']
                if banner_filename not in data['purchased_banners']:
                    data['purchased_banners'].append(banner_filename)
                save_user_data(user_id, data)
                bot.answer_callback_query(call.id, "–ë–∞–Ω–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!")
            else:
                bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Q –∫–æ–∏–Ω–æ–≤!")
        elif action == 'wear':
            banner_info = backgrounds[banner_index]
            banner_filename = banner_info['filename']
            data['current_banner'] = banner_filename
            save_user_data(user_id, data)
            bot.answer_callback_query(call.id, "–ë–∞–Ω–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–¥–µ—Ç!")

        markup = create_banner_keyboard(banner_index, user_id)
        banner_info = backgrounds[banner_index]
        avatar_file = get_user_avatar(bot, user_id)

        if avatar_file:
            image_blob = create_banner_with_all(banner_info['filename'], avatar_file, None, None)
        else:
            image_blob = create_banner_with_all(banner_info['filename'], "avatar.png", None, None)

        if image_blob:
            # –î–æ–±–∞–≤–ª–µ–Ω banner_index –≤ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            bot.edit_message_media(
                media=types.InputMediaPhoto(
                    image_blob, 
                    caption=format_banner_message(banner_info, banner_index)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
                ),
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
        else:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ banner_callback_handler: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@bot.message_handler(func=lambda message: message.text.lower().startswith(('–±–∞–Ω–µ—Ä', '–±–∞–Ω–Ω–µ—Ä', '—Ñ–æ–Ω', '–±–≥', '–±–µ–∫–≥—Ä–∞—É–Ω–¥', '/banner')))
@ignore_old_messages
def handle_banner_command(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ '–±–∞–Ω–Ω–µ—Ä 3'."""
    parts = message.text.lower().split()
    if len(parts) == 2 and parts[1].isdigit():
        banner_index = int(parts[1]) - 1  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        show_banner_by_index(message, banner_index)
    else:
        show_banner_menu(message)
        
@bot.message_handler(func=lambda message: message.text.lower().startswith(('+–∞–¥–º', '+–∞–¥–º–∏–Ω')))
@ignore_old_messages
def add_admin(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_id = str(message.from_user.id)
    if not is_owner(user_id):
        bot.reply_to(message, "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    if not message.reply_to_message:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    new_admin_id = str(message.reply_to_message.from_user.id)
    admins_data = load_admins()

    if new_admin_id in admins_data["admins"]:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        admins_data["admins"].append(new_admin_id)
        save_admins(admins_data)
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

@bot.message_handler(func=lambda message: message.text.lower().startswith(('-–∞–¥–º', '-–∞–¥–º–∏–Ω')))
@ignore_old_messages
def remove_admin(message):
    """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_id = str(message.from_user.id)
    if not is_owner(user_id):
        bot.reply_to(message, "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    if not message.reply_to_message:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    admin_id = str(message.reply_to_message.from_user.id)
    admins_data = load_admins()

    if admin_id not in admins_data["admins"]:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        admins_data["admins"].remove(admin_id)
        save_admins(admins_data)
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.first_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

@bot.message_handler(func=lambda message: message.text.lower() in ['–∞–¥–º–∏–Ω—ã', '–∫—Ç–æ –∞–¥–º–∏–Ω', '—Å—Ç–∞—Ñ—Ñ'])
@ignore_old_messages
def list_admins(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    admins_data = load_admins()
    owner = bot.get_chat(admins_data["owner_id"])
    admins_list = [bot.get_chat(admin_id).first_name for admin_id in admins_data["admins"]]

    response = f"üëë –í–ª–∞–¥–µ–ª–µ—Ü: {owner.first_name}\n"
    if admins_list:
        response += "üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n" + "\n".join(admins_list)
    else:
        response += "üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    bot.reply_to(message, response)
    
@bot.message_handler(func=lambda message: message.text.lower().startswith('—Ä–µ–ø–æ—Ä—Ç'))
@ignore_old_messages
def report_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Ä–µ–ø–æ—Ä—Ç."""
    if not message.reply_to_message:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —Ä–µ–ø–æ—Ä—Ç–∞
    reason = message.text[len('—Ä–µ–ø–æ—Ä—Ç'):].strip()
    if not reason:
        bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–µ–ø–æ—Ä—Ç–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    reporter = message.from_user
    reported_user = message.reply_to_message.from_user
    reported_message = message.reply_to_message

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    chat_id = reported_message.chat.id
    message_id = reported_message.message_id
    message_link = f"https://t.me/c/{str(chat_id).replace('-100', '')}/{message_id}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    report_text = (
        f"‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reporter.first_name} (@{reporter.username}) —Ä–µ–ø–æ—Ä—Ç–Ω—É–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        f"{message_link}\n"
        f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {reported_user.first_name} (@{reported_user.username})\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        f"–ü—Ä–æ—Å—å–±–∞ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã, –µ—Å–ª–∏ —Ä–µ–ø–æ—Ä—Ç –±—ã–ª –Ω–µ –ª–æ–∂–Ω—ã–º."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admins_data = load_admins()
    for admin_id in admins_data["admins"] + [admins_data["owner_id"]]:
        try:
            bot.send_message(admin_id, report_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.reply_to(message, "‚ùó –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "—Ä–ø"
@bot.message_handler(func=lambda message: message.text.lower().startswith('—Ä–ø '))
@ignore_old_messages
def handle_rp_command(message):
    if not message.reply_to_message:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    action = message.text[3:].strip().lower()  # –£–±–∏—Ä–∞–µ–º "—Ä–ø " –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    sender_name = message.from_user.first_name
    target_name = message.reply_to_message.from_user.first_name

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    all_actions = get_all_rp_actions()

    # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ "—Ä–∞–Ω–¥–æ–º", –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if action == "—Ä–∞–Ω–¥–æ–º":
        action = random.choice(list(all_actions.keys()))
    elif action not in all_actions:
        # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        bot.reply_to(message, "‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `–¥–µ–π—Å—Ç–≤–∏—è`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.", parse_mode="Markdown")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
    past_action = all_actions[action]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    rp_message = f"üë§ {sender_name} {past_action} {target_name}."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏
    bot.reply_to(message.reply_to_message, rp_message)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "—Ä–ø –¥–µ–π—Å—Ç–≤–∏—è"
@bot.message_handler(func=lambda message: message.text.lower() == '–¥–µ–π—Å—Ç–≤–∏—è')
@ignore_old_messages
def show_rp_actions(message):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
    actions_list = []
    for category, actions in RP_ACTIONS.items():
        actions_list.append(f"**{category}:**\n" + "\n".join([f"`{action}`" for action in actions.keys()]))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    bot.reply_to(message, "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –†–ü-–¥–µ–π—Å—Ç–≤–∏—è:\n\n" + "\n\n".join(actions_list), parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text.lower().startswith(('–ø–∞–∏–Ω—Ç–µ—Ä –∏–Ω—Ñ–∞', '–ø–∞–∏–Ω—Ç–µ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', '–ø—Ä–∏–Ω—Ç–µ—Ä –∏–Ω—Ñ–∞', '–ø—Ä–∏–Ω—Ç–µ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')))
@ignore_old_messages
def printer_info(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.lower()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('–ø–∞–∏–Ω—Ç–µ—Ä –∏–Ω—Ñ–∞'):
        command = '–ø–∞–∏–Ω—Ç–µ—Ä –∏–Ω—Ñ–∞'
    elif text.startswith('–ø–∞–∏–Ω—Ç–µ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'):
        command = '–ø–∞–∏–Ω—Ç–µ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'
    elif text.startswith('–ø—Ä–∏–Ω—Ç–µ—Ä –∏–Ω—Ñ–∞'):
        command = '–ø—Ä–∏–Ω—Ç–µ—Ä –∏–Ω—Ñ–∞'
    elif text.startswith('–ø—Ä–∏–Ω—Ç–µ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'):
        command = '–ø—Ä–∏–Ω—Ç–µ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'
    else:
        return  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
    info_text = message.text[len(command):].strip()

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –ø—É—Å—Ç–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
    if not info_text:
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: `–ø–∞–∏–Ω—Ç–µ—Ä –∏–Ω—Ñ–∞ —è —Å—Ç–∞–Ω—É –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º`.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100
    probability = random.randint(0, 100)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = f"ü§î {message.from_user.first_name}, —è –¥—É–º–∞—é, —á—Ç–æ —à–∞–Ω—Å –Ω–∞ —Ç–æ, —á—Ç–æ {info_text} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {probability}%."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text.lower() in ['—Ç–æ–ø', '–ª–∏–¥–µ—Ä—ã', '–ª—É—á—à–∏–µ'])
@ignore_old_messages
def show_top_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–ø–∞."""
    markup = types.InlineKeyboardMarkup()
    btn_messages = types.InlineKeyboardButton('üìä –°–æ–æ–±—â–µ–Ω–∏—è', callback_data='top_messages')
    btn_coins = types.InlineKeyboardButton('üí∞ –ö–æ–∏–Ω—ã', callback_data='top_coins')
    btn_cases = types.InlineKeyboardButton('üé¥ –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–µ–π—Å—ã', callback_data='top_cases')
    btn_cards = types.InlineKeyboardButton('üÉè –õ—É—á—à–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞', callback_data='top_cards')
    markup.add(btn_messages, btn_coins, btn_cases, btn_cards)

    bot.send_message(message.chat.id, "üìä –ö–∞–∫–æ–π —Ç–æ–ø –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=markup)
    
@bot.callback_query_handler(func=lambda call: call.data.startswith('top_'))
def handle_top_callback(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–ø–∞."""
    try:
        top_type = call.data.split('_')[1]
        user_id = str(call.from_user.id)
        user_data = load_user_data(user_id)

        if top_type == 'messages':
            top_users = get_top_messages()
            title = "üìä –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º:"
            user_value = user_data.get('message_count', 0)
        elif top_type == 'coins':
            top_users = get_top_coins()
            title = "üí∞ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ :"
            user_value = user_data.get('balance', 0)
        elif top_type == 'cases':
            top_users = get_top_cases()
            title = "üé¥ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –∫–µ–π—Å–∞–º:"
            user_value = user_data.get('case_count', 0)
        elif top_type == 'cards':
            top_users = get_top_cards()
            title = "üÉè –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ª—É—á—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ:"
            user_value = user_data.get('best_card', {}).get('q_coins', 0)
        else:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–ø–∞.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ø–∞
        top_text = title + "\n\n"
        for i, user in enumerate(top_users):
            user_id = user['user_id']
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_name = bot.get_chat(user_id).first_name
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

            value = user['value']
            if i == 0:
                top_text += f"ü•á {user_name} ‚Äì {value}\n"
            elif i == 1:
                top_text += f"ü•à {user_name} ‚Äì {value}\n"
            elif i == 2:
                top_text += f"ü•â {user_name} ‚Äì {value}\n"
            else:
                top_text += f"üéñÔ∏è {user_name} ‚Äì {value}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ
        user_name = call.from_user.first_name
        top_text += f"\nüë§ {user_name} ‚Äì {user_value}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        bot.send_message(call.message.chat.id, top_text)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–∞ (—É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏)
        bot.answer_callback_query(call.id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_top_callback: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@bot.message_handler(func=lambda message: message.text.lower().startswith(('–±—Ä ', '–±–∞–∫—à–æ—Ç —Ä–æ—É–ª–µ—Ç ', '—Ä–ª ', '—Ä—É–ª–µ—Ç–∫–∞ ')))
@ignore_old_messages
def start_roulette(message):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    balance = data['balance']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    current_time = time.time()
    last_roulette_time = data.get('last_roulette_time', 0)
    cooldown = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    if current_time - last_roulette_time < cooldown:
        remaining_time = cooldown - (current_time - last_roulette_time)
        minutes = int(remaining_time // 60)
        seconds = int(remaining_time % 60)
        bot.reply_to(message, f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É —á–µ—Ä–µ–∑ {minutes:02d}:{seconds:02d}.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = message.text.lower().split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É. –ù–∞–ø—Ä–∏–º–µ—Ä: `—Ä—É–ª–µ—Ç–∫–∞ 1000` –∏–ª–∏ `—Ä—É–ª–µ—Ç–∫–∞ –≤—Å–µ`.", parse_mode="Markdown")
        return

    bet_str = parts[1].lower()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É "–≤—Å–µ" –∏–ª–∏ "–≤—Å—ë"
    if bet_str in ['–≤—Å–µ', '–≤—Å—ë']:
        bet = min(balance, 10000000000)  # –õ–∏–º–∏—Ç 10 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤
    elif bet_str.endswith('–∫'):
        try:
            bet = int(bet_str[:-1]) * 1000
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–≤—Å–µ/–≤—Å—ë'.")
            return
    elif bet_str.endswith('–∫–∫') or bet_str.endswith('–º'):
        try:
            bet = int(bet_str[:-2]) * 1000000
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–≤—Å–µ/–≤—Å—ë'.")
            return
    elif bet_str.endswith('–º–∫'):
        try:
            bet = int(bet_str[:-2]) * 1000000000
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–≤—Å–µ/–≤—Å—ë'.")
            return
    else:
        try:
            bet = int(bet_str)
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–≤—Å–µ/–≤—Å—ë'.")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–≤–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ
    if bet < 100:
        bot.reply_to(message, "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äì 100 Q –∫–æ–∏–Ω–æ–≤.")
        return
    elif bet > 10000000000:
        bot.reply_to(message, "‚ùó –°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äì 10.000.000.000.")
        return
    elif bet > balance:
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Q –∫–æ–∏–Ω–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–ª–∏ (–æ—Ç 3 –¥–æ 8)
    total_bullets = random.randint(3, 8)
    live_bullets = random.randint(3, total_bullets - 3)
    blank_bullets = total_bullets - live_bullets

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    rank = get_user_rank(data['message_count'])
    initial_text = (
        f"üî´ *{rank} {message.from_user.first_name}, –≤—ã —Ä–µ—à–∏–ª–∏—Å—å —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É.*\n\n\n"
        f"üí∞ _–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ‚Äì {bet} Q –∫–æ–∏–Ω–æ–≤_\n\n"
        f"‚úñÔ∏è _–ú–Ω–æ–∂–∏—Ç–µ–ª—å ‚Äì √ó{1.00}_\n\n"
        f"üíä *–ü—É–ª–∏:*\n\n"
        f"üî¥ _–ó–∞—Ä—è–∂–µ–Ω–Ω—ã–µ ‚Äì {live_bullets}_\n\n"
        f"üîµ _–•–æ–ª–æ—Å—Ç—ã–µ ‚Äì {blank_bullets}_\n\n\n"
        f"‚ùóÔ∏è *–ó–∞–ø–æ–º–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª—å! –í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã.*"
    )

    markup = types.InlineKeyboardMarkup()
    btn_rules = types.InlineKeyboardButton('üìñ –ü—Ä–∞–≤–∏–ª–∞', callback_data='roulette_rules')
    btn_start = types.InlineKeyboardButton('‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç', callback_data=f'roulette_start_{user_id}')
    markup.add(btn_rules, btn_start)

    bot.send_message(message.chat.id, initial_text, 
                    parse_mode="Markdown", 
                    reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'roulette_rules')
def show_rules(call):
    rules_text = (
        "üìñ *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É:*\n\n"
        "üë® *–ö–Ω–æ–ø–∫–∞ \"–í —Å–µ–±—è\"*\n"
        "üî¥ _–ó–∞—Ä—è–∂–µ–Ω–Ω—ã–º ‚Äì –ø—Ä–æ–∏–≥—Ä—ã—à_\n"
        "üîµ _–•–æ–ª–æ—Å—Ç—ã–º ‚Äì +√ó0.20 –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é —Å—Ç–∞–≤–∫–∏_\n\n"
        "üë§ *–ö–Ω–æ–ø–∫–∞ \"–í –º–∞–Ω–µ–∫–µ–Ω\"*\n"
        "üî¥ _–ó–∞—Ä—è–∂–µ–Ω–Ω—ã–º ‚Äì +√ó0.30 –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é —Å—Ç–∞–≤–∫–∏_\n"
        "üîµ _–•–æ–ª–æ—Å—Ç—ã–º ‚Äì -√ó0.30 –æ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è —Å—Ç–∞–≤–∫–∏_"
    )
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, rules_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"
@bot.callback_query_handler(func=lambda call: call.data.startswith('roulette_start_'))
def start_game(call):
    user_id = call.data.split('_')[2]
    if str(call.from_user.id) != user_id:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!")
        return

    data = load_user_data(user_id)
    roulette_data = data['roulette']

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í —Å–µ–±—è" –∏ "–í –º–∞–Ω–µ–∫–µ–Ω"
    markup = create_shoot_keyboard(user_id)

    response = (
        f"üî´ *–°–¢–†–ï–õ–Ø–ô! –ù–æ... –í –º–∞–Ω–µ–∫–µ–Ω–∞ –∏–ª–∏ —Å–µ–±—è?*\n\n\n"
        f"‚úñÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{roulette_data['multiplier']:.2f}"
    )

    bot.edit_message_text(response, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('roulette_shoot_self_'))
def handle_shoot_self(call):
    user_id = call.data.split('_')[3]
    if str(call.from_user.id) != user_id:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!")
        return

    data = load_user_data(user_id)
    roulette_data = data['roulette']

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø—É–ª—é
    if roulette_data['remaining_live'] > 0 and roulette_data['remaining_blank'] > 0:
        bullet_type = random.choice(['live', 'blank'])
    elif roulette_data['remaining_live'] > 0:
        bullet_type = 'live'
    else:
        bullet_type = 'blank'

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—É–ª–∏
    if bullet_type == 'live':
        roulette_data['remaining_live'] -= 1
    else:
        roulette_data['remaining_blank'] -= 1
    roulette_data['remaining_bullets'] -= 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—É–ª–∏
    if bullet_type == 'blank':
        roulette_data['multiplier'] += 0.20
        result_message = "üòÆ‚Äçüí® *–•–æ–ª–æ—Å—Ç–æ–π –≤ —Å–µ–±—è! +√ó0.20 –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é —Å—Ç–∞–≤–∫–∏.*"
    else:
        roulette_data['multiplier'] = 0
        result_message = "ü§ï *–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Å–µ–±—è –∑–∞—Ä—è–∂–µ–Ω–Ω—ã–º –ø–∞—Ç—Ä–æ–Ω–æ–º! –í—Å—è —Å—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–µ–ª–∞.*\n\n\n‚è≥ _–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç_"
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        final_multiplier = 0
        bet = roulette_data['bet']
        winnings = 0  # –ü—Ä–æ–∏–≥—Ä—ã—à –≤—Å–µ–π —Å—Ç–∞–≤–∫–∏

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        data['balance'] -= bet
        del data['roulette']
        save_user_data(user_id, data)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, result_message)
        return  # –í–∞–∂–Ω–æ: –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–¥–µ—Å—å

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ–ª–æ—Å—Ç–æ–π –ø—É–ª–∏)
    data['roulette'] = roulette_data
    save_user_data(user_id, data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –ø—É–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ–ª–æ—Å—Ç–æ–π –ø—É–ª–∏)
    if roulette_data['remaining_bullets'] == 0:
        final_multiplier = roulette_data['multiplier']
        bet = roulette_data['bet']
        winnings = int(bet * final_multiplier)

        if final_multiplier > 1.00:
            result_message = f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {call.from_user.first_name}! –í–∞—à –º–Ω–æ–∂–∏—Ç–µ–ª—å ‚Äì √ó{final_multiplier:.2f}. –í—ã–∏–≥—Ä—ã—à {winnings} Q –∫–æ–∏–Ω–æ–≤!"
        else:
            result_message = f"üò• –°–æ–∂–∞–ª–µ—é, {call.from_user.first_name}. –í–∞—à –º–Ω–æ–∂–∏—Ç–µ–ª—å ‚Äì √ó{final_multiplier:.2f}. –ü—Ä–æ–∏–≥—Ä—ã—à {bet - winnings} Q –∫–æ–∏–Ω–æ–≤."

        data['balance'] += winnings - bet
        del data['roulette']
        save_user_data(user_id, data)

        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, result_message)
    else:
        markup = create_shoot_keyboard(user_id)
        response = (
            f"‚úñÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: √ó{roulette_data['multiplier']:.2f}\n"
            f"{result_message}"
        )
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üë§ –í –º–∞–Ω–µ–∫–µ–Ω"
@bot.callback_query_handler(func=lambda call: call.data.startswith('roulette_shoot_dummy_'))
def handle_shoot_dummy(call):
    user_id = call.data.split('_')[3]
    if str(call.from_user.id) != user_id:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!")
        return

    data = load_user_data(user_id)
    roulette_data = data['roulette']

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø—É–ª—é
    if roulette_data['remaining_live'] > 0 and roulette_data['remaining_blank'] > 0:
        bullet_type = random.choice(['live', 'blank'])
    elif roulette_data['remaining_live'] > 0:
        bullet_type = 'live'
    else:
        bullet_type = 'blank'

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—É–ª–∏
    if bullet_type == 'live':
        roulette_data['remaining_live'] -= 1
    else:
        roulette_data['remaining_blank'] -= 1
    roulette_data['remaining_bullets'] -= 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—É–ª–∏
    if bullet_type == 'blank':
        roulette_data['multiplier'] -= 0.30
        result_message = "üòí *–•–æ–ª–æ—Å—Ç–æ–π –≤ –º–∞–Ω–µ–∫–µ–Ω–∞! -√ó0.30 –æ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è —Å—Ç–∞–≤–∫–∏.*"
    else:
        roulette_data['multiplier'] += 0.30
        result_message = "ü§Ø *–ó–∞—Ä—è–∂–µ–Ω–Ω—ã–π –≤ –º–∞–Ω–µ–∫–µ–Ω–∞! +√ó0.30 –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é —Å—Ç–∞–≤–∫–∏.*"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data['roulette'] = roulette_data
    save_user_data(user_id, data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –ø—É–ª–∏
    if roulette_data['remaining_bullets'] == 0:
        # –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_multiplier = roulette_data['multiplier']
        bet = roulette_data['bet']
        winnings = int(bet * final_multiplier)

        if final_multiplier > 1.00:
            result_message = f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {call.from_user.first_name}! –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∏–≥—Ä—É –≤ —Ä—É–ª–µ—Ç–∫—É, –≤–∞—à –º–Ω–æ–∂–∏—Ç–µ–ª—å ‚Äì √ó{final_multiplier:.2f}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} Q –∫–æ–∏–Ω–æ–≤!"
        else:
            result_message = f"üò• –°–æ–∂–∞–ª–µ—é, {call.from_user.first_name}. –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∏–≥—Ä—É –≤ —Ä—É–ª–µ—Ç–∫—É, –≤–∞—à –º–Ω–æ–∂–∏—Ç–µ–ª—å ‚Äì √ó{final_multiplier:.2f}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet - winnings} Q –∫–æ–∏–Ω–æ–≤."

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        data['balance'] += winnings - bet
        data['roulette_games_played'] += 1
        del data['roulette']  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        save_user_data(user_id, data)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, result_message)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π
        markup = create_shoot_keyboard(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

        response = (
            f"üî´ *–°–¢–†–ï–õ–Ø–ô! –ù–æ... –í –º–∞–Ω–µ–∫–µ–Ω–∞ –∏–ª–∏ —Å–µ–±—è?*\n\n\n"
            f"‚úñÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: √ó{roulette_data['multiplier']:.2f}\n\n"
            f"{result_message}"
        )

        bot.edit_message_text(response, call.message.chat.id, call.message.message_id, reply_markup=markup)
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@bot.message_handler(func=lambda message: message.text.lower().startswith(('–ø—Ä–æ–º–æ ', '–ø—Ä–æ–º–æ–∫–æ–¥ ', '–ø—Ä–æ–º–∏–∫ ')))
@ignore_old_messages
def use_promocode(message):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    promocodes = load_promocodes()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ—á–∏—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã

    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: `–ø—Ä–æ–º–æ–∫–æ–¥ FREE100`")
        return

    promo = parts[1].upper()

    if promo not in promocodes:
        bot.reply_to(message, "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    promo_data = promocodes[promo]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    if user_id in promo_data['used_by']:
        bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ.")
        return

    # –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏
    amount = promo_data['amount']
    data['balance'] += amount
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo_data['uses_left'] -= 1
    promo_data['used_by'].append(user_id)
    save_user_data(user_id, data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ)
    promocodes[promo] = promo_data
    save_promocodes(promocodes)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    if promo_data['uses_left'] > 0:
        try:
            creator_id = promo_data['created_by']
            used = promo_data['total_uses'] - promo_data['uses_left']
            user_info = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
            
            bot.send_message(
                creator_id,
                f"üîî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ {promo}\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
                f"üìä –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {used}/{promo_data['total_uses']}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    bot.reply_to(message, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} Q –∫–æ–∏–Ω–æ–≤!")

def save_promocodes(promocodes):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
    active_promocodes = {
        code: data for code, data in promocodes.items()
        if data['uses_left'] > 0
    }
    
    try:
        with open(PROMOCODES_FILE, 'w', encoding='utf-8') as f:
            json.dump(active_promocodes, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")

@bot.message_handler(func=lambda message: message.text.lower().startswith(('+–ø—Ä–æ–º–æ ', '+–ø—Ä–æ–º–æ–∫–æ–¥ ', '+–ø—Ä–æ–º–∏–∫ ')))
@ignore_old_messages
def create_promocode(message):
    user_id = str(message.from_user.id)
    
    if not is_promo_admin(user_id):
        bot.reply_to(message, "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –ø—Ä–æ–º–æ-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã")
        return

    parts = message.text.split()
    if len(parts) < 4:
        bot.reply_to(message, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: `+–ø—Ä–æ–º–æ–∫–æ–¥ [–ö–û–î] [–°–£–ú–ú–ê] [–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø]`\n–ü—Ä–∏–º–µ—Ä: `+–ø—Ä–æ–º–æ–∫–æ–¥ FREE100 1000 10`")
        return

    try:
        promo = parts[1].upper()
        amount = int(parts[2])
        uses = int(parts[3])
        
        if amount <= 0 or uses <= 0:
            bot.reply_to(message, "‚ö†Ô∏è –°—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return

        promocodes = load_promocodes()

        if promo in promocodes:
            bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ `{promo}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º total_uses
        promocodes[promo] = {
            'amount': amount,
            'uses_left': uses,
            'total_uses': uses,  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            'created_by': user_id,
            'created_at': time.time(),
            'used_by': [],
            'creator_name': message.from_user.first_name
        }
        save_promocodes(promocodes)

        bot.reply_to(message, f"""
‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üé´ –ö–æ–¥: `{promo}`
üí∞ –°—É–º–º–∞: {amount} Q
üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses}
üìå –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.
        """, parse_mode="Markdown")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: any(
    message.text.lower().startswith(cmd) 
    for cmd in ['–º–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', '.–ø—Ä–æ–º–æ–∫–æ–¥—ã', '.–ø—Ä–æ–º–æ']
))
@ignore_old_messages
def my_promocodes(message):
    user_id = str(message.from_user.id)
    if not is_promo_admin(user_id):
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–æ-–∞–¥–º–∏–Ω–∞–º.")
        return

    promocodes = load_promocodes()
    user_promos = {k:v for k,v in promocodes.items() if v.get('created_by') == user_id}

    if not user_promos:
        bot.reply_to(message, "‚ÑπÔ∏è –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
        return

    response = ["üìä –í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:"]
    for code, data in user_promos.items():
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –≥–¥–µ –Ω–µ—Ç total_uses
        total_uses = data.get('total_uses', data.get('uses_left', 0))  # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        used = total_uses - data['uses_left'] if 'uses_left' in data else 0
        total = data.get('total_uses', data.get('uses_left', 0))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        usage_info = f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{total}"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        last_used = []
        if 'used_by' in data and data['used_by']:
            last_used = data['used_by'][-3:]
            last_used = [str(u) for u in last_used]
        
        response.append(
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üé´ –ö–æ–¥: `{code}`\n"
            f"üí∞ –°—É–º–º–∞: {data.get('amount', 0)} Q –∫–æ–∏–Ω–æ–≤\n"
            f"{usage_info}\n"
            f"üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {', '.join(last_used) or '–Ω–µ—Ç'}"
        )

    bot.reply_to(message, "\n".join(response), parse_mode="Markdown")

@bot.message_handler(func=lambda message: any(
    message.text.lower().startswith(cmd) 
    for cmd in ['–∫–∞–∑–∏–∫', '–∫–∞–∑–∏–Ω–æ', '–∫–∞–∑', '–∫—à', '–∞–∑–∏–Ω–æ']
))
@ignore_old_messages
def casino_handler(message):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    balance = data['balance']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É. –ù–∞–ø—Ä–∏–º–µ—Ä: `–∫–∞–∑–∏–Ω–æ 500` –∏–ª–∏ `–∫–∞–∑ –≤—Å–µ`")
        return

    bet_str = parts[1].lower()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏
    if bet_str in ['–≤—Å–µ', '–≤—Å—ë']:
        bet = balance
    elif bet_str.endswith('–∫'):
        bet = int(bet_str[:-1]) * 1000
    elif bet_str.endswith('–∫–∫') or bet_str.endswith('–º'):
        bet = int(bet_str[:-2]) * 1000000
    else:
        try:
            bet = int(bet_str)
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–≤—Å–µ'.")
            return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
    if bet < 100:
        bot.reply_to(message, "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 100 Q –∫–æ–∏–Ω–æ–≤.")
        return
    if bet > balance:
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Q –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    # –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    result = generate_casino_result()
    multiplier = calculate_multiplier(result)
    win_amount = int(bet * multiplier)
    net_result = win_amount - bet

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    data['balance'] += net_result
    data['casino_games_played'] += 1
    
    if net_result > 0:
        data['coins_from_games'] += net_result
        data['total_coins_earned'] += net_result
    else:
        data['coins_spent_games'] += abs(net_result)
        data['total_coins_spent'] += abs(net_result)
    
    save_user_data(user_id, data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    result_display = " | ".join(result)
    if multiplier > 1.00:
        emoji = "üí∞üéâ"
        result_text = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} Q –∫–æ–∏–Ω–æ–≤!"
    elif multiplier == 1.00:
        emoji = "üòê"
        result_text = "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
    else:
        emoji = "üòµ‚Äçüí´"
        result_text = f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {abs(net_result)} Q –∫–æ–∏–Ω–æ–≤."

    response = (
        f"üé∞ *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∑–∏–Ω–æ* üé∞\n\n"
        f"‚û°Ô∏è {result_display}\n\n"
        f"‚úñÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{multiplier:.2f}\n"
        f"üí∏ –°—Ç–∞–≤–∫–∞: {bet} Q\n"
        f"üèÜ {result_text}\n\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data['balance']} Q –∫–æ–∏–Ω–æ–≤ {emoji}"
    )

    bot.reply_to(message, response, parse_mode="Markdown")
    
# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ñ–∞
@bot.message_handler(func=lambda m: m.text.lower().split()[0] in ['–∏–Ω—Ñ–∞', '–∏–Ω—Ñ–æ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'info', '/info'])
@ignore_old_messages
def user_info_command(message):
    user_id = str(message.from_user.id)
    data = load_user_data(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status = []
    if is_owner(user_id):
        status.append("–í–ª–∞–¥–µ–ª–µ—Ü")
    if is_admin(user_id):
        status.append("–ê–¥–º–∏–Ω")
    if is_promo_admin(user_id):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        status.append("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
    
    status_text = " | ".join(status) if status else "–ò–≥—Ä–æ–∫"

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–∞—Ä—Ç–æ—á–µ–∫
    last_cards = []
    for card in data.get('last_cards', [])[-5:]:
        card_entry = f"{card['name']} // {card['rarity']} // {card['q_coins']} Q"
        last_cards.append(card_entry)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏
    banner_name, banner_price = get_item_info(data['current_banner'], backgrounds)
    frame_name, frame_price = get_item_info(data.get('current_frame'), frames)
    underframe_name, underframe_price = get_item_info(data.get('current_underframe'), underframes)
    
    total_cost = sum(filter(None, [banner_price, frame_price, underframe_price]))
        
    # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    response = (
        f"üìñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ ({get_user_rank(data['message_count'])}) {message.from_user.first_name}*\n\n\n"
        f"üî∞ _–°—Ç–∞—Ç—É—Å ‚Äì {status_text}_\n\n"
        f"üí∏ _–ü–æ–ª—É—á–µ–Ω–æ Q –∫–æ–∏–Ω–æ–≤ –∑–∞ —Å–∏–º–≤–æ–ª—ã ‚Äì {data['coins_from_messages']}_\n\n\n"
        f"üí¨ _–ù–∞–ø–∏—Å–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äì {data['message_count']}_\n\n\n"
        f"üñº *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:*\n\n"
        f"üó∫ _–ë–∞–Ω–Ω–µ—Ä ‚Äì {banner_name} // {banner_price or '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}_\n\n"
        f"üî≤ _–†–∞–º–∫–∞ ‚Äì {frame_name or '–ù–µ—Ç'} // {frame_price or '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}_\n\n"
        f"üß± _–ü–æ–¥—Ä–∞–º–∫–∞ ‚Äì {underframe_name or '–ù–µ—Ç'} // {underframe_price or '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}_\n\n"
        f"üí∏ _–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ‚Äì {total_cost} Q –∫–æ–∏–Ω–æ–≤_\n\n\n"
        f"üí∏ *–î–µ–Ω—å–≥–∏:*\n\n"
        f"üìà _–ü–æ–ª—É—á–µ–Ω–æ Q –∫–æ–∏–Ω–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è ‚Äì {data['total_coins_earned']}_\n\n"
        f"üìà _–ü–æ–ª—É—á–µ–Ω–æ Q –∫–æ–∏–Ω–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ ‚Äì {data['coins_from_transfers']}_\n\n"
        f"üìà _–ü–æ–ª—É—á–µ–Ω–æ Q –∫–æ–∏–Ω–æ–≤ —Å –∏–≥—Ä ‚Äì {data['coins_from_games']}_\n\n"
        f"üìâ _–ü–æ—Ç—Ä–∞—á–µ–Ω–æ Q –∫–æ–∏–Ω–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è ‚Äì {data['total_coins_spent']}_\n\n"
        f"üìâ _–ü–æ—Ç—Ä–∞—á–µ–Ω–æ Q –∫–æ–∏–Ω–æ–≤ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º ‚Äì {data['coins_spent_transfers']}_\n\n"
        f"üìâ _–í –∏–≥—Ä—ã ‚Äì {data['coins_spent_games']}_\n\n\n"
        f"üéÆ *–ò–≥—Ä—ã:*\n\n"
        f"üé∞ _–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä –≤ –∫–∞–∑–∏–Ω–æ —à–∞–Ω—Å–∞ ‚Äì {data['casino_games_played']}_\n\n"
        f"üî´ _–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä –≤ —Ä—É–ª–µ—Ç–∫—É ‚Äì {data['roulette_games_played']}_\n\n"
        f"üé¥ _–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:_\n" + "\n".join(last_cards)
    )

    bot.send_message(message.chat.id, response, parse_mode="Markdown")

# –í —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
def is_promo_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    admins_data = load_admins()
    return str(user_id) in admins_data.get("promo_admins", [])

@bot.message_handler(func=lambda message: True) # –õ–æ–≤–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def message_handler(message):
    update_message_count(message.from_user.id)
    coins_earned = give_coins_for_message(message.from_user.id, message.text)

if __name__ == "__main__":
    migrate_all_users()
    backup_user_data()
    migrate_promocodes()
    notify_bot_started()
    bot.infinity_polling(none_stop=True)